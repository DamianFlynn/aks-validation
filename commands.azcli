# ---------------------------------------------------------------------------------------------------------------------
# Configure AZ Hub and Spoke
#


cd tf/scaffold
terraform init -backend-config=azure.conf
terraform plan
terraform apply

# ---------------------------------------------------------------------------------------------------------------------
# Configure AKS Environment
#

subId=283dd4da-759e-4ceb-a6ef-618ebebb7705
az account set --subscription $subId

envName=p-we1k8s
netRG=$envName-net
aksRG=$envName-aks
VNET_ID=$(az network vnet show --resource-group $netRG --name $netRG-vnet --query id -o tsv)
echo $VNET_ID

LOGS_ID=$(az monitor log-analytics workspace show -g p-mgt-log -n p-mgt-log-ws --query 'id' -o tsv)
echo $LOGS_ID

ACR_ID=$(az acr show -g p-we1k8s-acr -n walwilreg --query 'id' -o tsv)

echo $ACR_ID

cd ../..
az deployment group create -g $aksRG \
    --template-file ./arm-module/aks.json \
    --parameters targetVnetResourceId=$VNET_ID logAnalyticsWorkspaceId=$LOGS_ID azureContainerRegistryId=$ACR_ID



# ---------------------------------------------------------------------------------------------------------------------
# Configure AKS
#

#
# Configure Jumpbox
#

sudo apt update
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
sudo az aks install-cli
sudo chown -R azureuser /home/azureuser/.azure
az login
az aks get-credentials -n p-we1k8s-aks -g p-we1k8s-aks

kubectl version --client
kubectl get nodes


# Testing Connections
#
kubectl create namespace debugging
kubectl run curl -n debugging -i --tty --rm --image=mcr.microsoft.com/azure-cli --overrides='[{"op":"add","path":"/spec/containers/0/resources","value":{"limits":{"cpu":"200m","memory":"128Mi"}}}]' --override-type json

# From within the open shell now running on a container inside your cluster
DOMAIN_NAME="p3.walwil.com" # <-- Change to your custom domain value if a different one was used
curl -kI https://bu0001a0008-00.aks-ingress.p3.walwil.com -w '%{remote_ip}\n'
exit


# ---------------------------------------------------------------------------------------------------------------------
# Configure AKS Configuration
#

# Ensure the cluster has the AKS to Keyvault Secrets Provider enabled
#az aks enable-addons --addons azure-keyvault-secrets-provider --name p-we1k8s-aks --resource-group p-we1k8s-aks

kubectl get pods -n kube-system -l 'app in (secrets-store-csi-driver, secrets-store-provider-azure)'


# RBAC - ManagedIdentity p-we1aks-aks-agentpool delegated Managed Identity Operator on RG AgentPool
# p-we1k8s-aks-agentpool was added as Managed Identity Operator for MC_p-we1k8s-aks_p-we1k8s-aks_westeurope

# ---------------------------------------------------------------------------------------------------------------------
# Configure AKS Baseline
#

kubectl apply -f ./baseline/baseline-namespace.yaml
kubectl apply -f ./baseline/aad-pod-identity.yaml      # this might need to be exectuted 2 times, to apply podidentityexceptions


# ---------------------------------------------------------------------------------------------------------------------
# Configure Application
#


kubectl apply -f ./portop/portop-namespace.yaml 

# Update the Resource ID of the Identity: p-we1k8s-aks-pods-identity

TRAEFIK_USER_ASSIGNED_IDENTITY_RESOURCE_ID=$(az identity show -g p-we1k8s-aks -n p-we1k8s-aks-pods-identity --query 'id' -o tsv)
echo $TRAEFIK_USER_ASSIGNED_IDENTITY_RESOURCE_ID
TRAEFIK_USER_ASSIGNED_IDENTITY_CLIENT_ID=$(az identity show -g p-we1k8s-aks -n p-we1k8s-aks-pods-identity --query 'clientId' -o tsv)
echo $TRAEFIK_USER_ASSIGNED_IDENTITY_CLIENT_ID

kubectl apply -f ./portop/traefik-podidentity-binding.yaml



#
# Load the Traefik Ingress Cert to the Keyvault
#

KEYVAULT_NAME=p-we1k8s-aks-20220210-kv
TEMP_ROLEASSIGNMENT_TO_UPLOAD_CERT=$(az role assignment create --role a4417e6f-fecd-4de8-b567-7b0420556985 --assignee-principal-type user --assignee-object-id $(az ad signed-in-user show --query 'objectId' -o tsv) --scope $(az keyvault show --name $KEYVAULT_NAME --query 'id' -o tsv) --query 'id' -o tsv)

# If you are behind a proxy or some other egress that does not provide a consistent IP, you'll need to manually adjust the
# Azure Key Vault firewall to allow this traffic.
CURRENT_IP_ADDRESS=$(curl -s https://ifconfig.io)
az keyvault network-rule add -n $KEYVAULT_NAME --ip-address ${CURRENT_IP_ADDRESS}


# combine public and private keys to a single PEM File
cat ./certs/traefik-ingress-internal-aks-ingress-tls.crt ./certs/traefik-ingress-internal-aks-ingress-tls.key > ./certs/traefik-ingress-internal-aks-ingress-tls.pem

# Import the AKS Ingress Controller's Wildcard Certificate for *.aks-ingress.contoso.com.
az keyvault certificate import -f ./certs/traefik-ingress-internal-aks-ingress-tls.pem -n traefik-ingress-internal-aks-ingress-tls --vault-name $KEYVAULT_NAME


# Remove Azure Key Vault import certificates permissions and network access for current user.
az keyvault network-rule remove -n $KEYVAULT_NAME --ip-address "${CURRENT_IP_ADDRESS}/32"
az role assignment delete --ids $TEMP_ROLEASSIGNMENT_TO_UPLOAD_CERT


#
# Enable to Secret Store in AKS to connect with the Certificate in the Vault for Traefik
#

kubectl apply -f ./portop/traefik-tls-secret-keyvault.yaml

#
# Now - Lets import some Containers into our registy for deployment to the cluster
#           
ACR_NAME=walwilreg
az acr import --source docker.io/library/traefik:v2.5.3 -n $ACR_NAME
az acr import --source docker.io/weaveworks/kured:1.9.0 -n $ACR_NAME

#
# Deploy the Traefik Reverse Proxy Service
#

# Make sure to update the Load Balancer IP, and the Container Registry
kubectl apply -f ./portop/traefik.yaml

kubectl wait -n portop --for=condition=ready pod --selector=app.kubernetes.io/name=traefik-ingress-ilb --timeout=90s