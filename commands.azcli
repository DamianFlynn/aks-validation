# ---------------------------------------------------------------------------------------------------------------------
# Configure AZ Hub and Spoke
#


cd tf/scaffold
terraform init -backend-config=azure.conf
terraform plan
terraform apply

# ---------------------------------------------------------------------------------------------------------------------
# Configure AKS Environment
#

subId=283dd4da-759e-4ceb-a6ef-618ebebb7705
az account set --subscription $subId

envName=p-we1k8s
netRG=$envName-net
aksRG=$envName-aks
VNET_ID=$(az network vnet show --resource-group $netRG --name $netRG-vnet --query id -o tsv)
LOGS_ID=/subscriptions/283dd4da-759e-4ceb-a6ef-618ebebb7705/resourcegroups/p-mgt-log/providers/microsoft.operationalinsights/workspaces/p-mgt-log-ws
ACR_ID=/subscriptions/283dd4da-759e-4ceb-a6ef-618ebebb7705/resourceGroups/p-we1k8s-acr/providers/Microsoft.ContainerRegistry/registries/WalWilReg

cd ../..
az deployment group create -g $aksRG \
    --template-file ./arm-module/aks.json \
    --parameters targetVnetResourceId=$VNET_ID logAnalyticsWorkspaceId=$LOGS_ID azureContainerRegistryId=$ACR_ID



# ---------------------------------------------------------------------------------------------------------------------
# Configure AKS
#

sudo apt update
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
sudo chown -R azureuser /home/azureuser/.azure

sudo az aks install-cli
kubectl version --client
kubectl get nodes


# Testing Connections
#
kubectl create namespace debugging
kubectl run curl -n debugging -i --tty --rm --image=mcr.microsoft.com/azure-cli --overrides='[{"op":"add","path":"/spec/containers/0/resources","value":{"limits":{"cpu":"200m","memory":"128Mi"}}}]' --override-type json

# From within the open shell now running on a container inside your cluster
DOMAIN_NAME="p3.walwil.com" # <-- Change to your custom domain value if a different one was used
curl -kI https://bu0001a0008-00.aks-ingress.p3.walwil.com -w '%{remote_ip}\n'
exit


# ---------------------------------------------------------------------------------------------------------------------
# Configure AKS Configuration
#

# Ensure the cluster has the AKS to Keyvault Secrets Provider enabled
az aks enable-addons --addons azure-keyvault-secrets-provider --name p-we1k8s-aks --resource-group p-we1k8s-aks

kubectl get pods -n kube-system -l 'app in (secrets-store-csi-driver, secrets-store-provider-azure)'


# RBAC - ManagedIdentity p-we1aks-aks-agentpool delegated Managed Identity Operator on RG AgentPool
# p-we1k8s-aks-agentpool was added as Managed Identity Operator for MC_p-we1k8s-aks_p-we1k8s-aks_westeurope

# ---------------------------------------------------------------------------------------------------------------------
# Configure AKS Baseline
#

kubectl apply -f ./baseline/baseline-namespace.yaml
kubectl apply -f ./baseline/aad-pod-identity.yaml      # this might need to be exectuted 2 times, to apply podidentityexceptions


# ---------------------------------------------------------------------------------------------------------------------
# Configure Application
#

kubectl apply -f ./portop/portop-namespace.yaml 

# Update the Resource ID of the Identity: p-we1k8s-aks-pods-identity
kubectl apply -f ./portop/traefik-podidentity-binding.yaml

kubectl apply -f ./portop/traefik-tls-secret-keyvault.yaml

           
$ACR_NAME=walwilrepo
az acr import --source docker.io/library/traefik:v2.5.3 -n $ACR_NAME_AKS_BASELINE
az acr import --source docker.io/weaveworks/kured:1.9.0 -n $ACR_NAME_AKS_BASELINE

kubectl apply -f ./portop/traefik.yaml